buildscript {
    apply from: 'versions.gradle'
}
plugins {
    id 'java'
    id 'io.qameta.allure' version "2.10.0"
    id 'org.springframework.boot' version "2.3.4.RELEASE"
    id 'io.spring.dependency-management' version "1.1.4"
}

group 'org.testFramework'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("io.github.bonigarcia:webdrivermanager:5.6.3")
    implementation "org.seleniumhq.selenium:selenium-java:$versions.seleniumVersion"
    implementation "io.qameta.allure:allure-testng:2.13.2"
    implementation "org.springframework:spring-core:5.2.5.RELEASE"
    implementation "org.springframework:spring-context:5.2.5.RELEASE"
    implementation "org.springframework:spring-test:5.2.5.RELEASE"
    implementation "org.testng:testng:7.1.0"
    implementation 'com.google.guava:guava:30.1.1-jre'

}

sourceCompatibility = JavaVersion.VERSION_1_8;
targetCompatibility = JavaVersion.VERSION_1_8;
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

wrapper {
    gradleVersion = '6.9'
    distributionType = Wrapper.DistributionType.BIN
}

tasks.withType(Test) {
    logging.captureStandardOutput(LogLevel.INFO)
    beforeTest { println "\n*** Starting execution of test ${it.className}.${it.name} ***" }
    afterTest { descriptor, result ->
        println "<<< Test ${descriptor.name} resulted in ${result.resultType}"
    }

    testLogging {
        events = ["passed", "failed", "skipped"]
        showStandardStreams = true
        exceptionFormat "full"
    }
}

task cleanAndBuild() {
    def gradleCacheLocation = "~/.gradle/caches"
    file(gradleCacheLocation).list().each {
        delete "${gradleCacheLocation}/${it}"
    }
    finalizedBy(['build', 'extractGXUtils'])
}

test {
    useJUnitPlatform()
}